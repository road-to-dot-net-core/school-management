// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Infra;

namespace School.Infra.Migrations
{
    [DbContext(typeof(AccessControlContext))]
    [Migration("20201110210732_change token length on refreshToken")]
    partial class changetokenlengthonrefreshToken
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("Action")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("Controller")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ControllerActionName")
                        .HasColumnName("ControllerActionName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 11, 10, 21, 7, 30, 697, DateTimeKind.Local).AddTicks(8060));

                    b.Property<string>("DeleteReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletReason")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .HasDefaultValue(null);

                    b.Property<Guid?>("DeletedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("DeletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Label")
                        .HasColumnName("Label")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("FEATURES");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 11, 10, 21, 7, 30, 746, DateTimeKind.Local).AddTicks(2247));

                    b.Property<string>("DeleteReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletReason")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .HasDefaultValue(null);

                    b.Property<Guid?>("DeletedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("DeletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("Label")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("PERMISSIONS");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.PermissionFeature", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssociatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("FeatureId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PERMISSIONS_FEATURES");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 11, 10, 21, 7, 30, 848, DateTimeKind.Local).AddTicks(8033));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeleteReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletReason")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .HasDefaultValue(null);

                    b.Property<Guid?>("DeletedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("DeletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("bit");

                    b.Property<string>("JwtId")
                        .HasColumnName("JwtId")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Refresh_Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnName("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.Property<bool>("Used")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("REFRESH_TOKENS");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanBeDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 11, 10, 21, 7, 30, 751, DateTimeKind.Local).AddTicks(2240));

                    b.Property<string>("DeleteReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletReason")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .HasDefaultValue(null);

                    b.Property<Guid?>("DeletedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("DeletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("ROLES");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssociatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 11, 10, 21, 7, 30, 755, DateTimeKind.Local).AddTicks(6840));

                    b.Property<string>("DeleteReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletReason")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .HasDefaultValue(null);

                    b.Property<Guid?>("DeletedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("DeletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ROLE_PERMISSIONS");
                });

            modelBuilder.Entity("Schools.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 11, 10, 21, 7, 30, 765, DateTimeKind.Local).AddTicks(9386));

                    b.Property<string>("DeleteReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletReason")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250)
                        .HasDefaultValue(null);

                    b.Property<Guid?>("DeletedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("DeletedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastConnexionOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.PermissionFeature", b =>
                {
                    b.HasOne("Schools.Domain.Models.Access_Control.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Models.Access_Control.Permission", "Permission")
                        .WithMany("PermissionFeatures")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.RefreshToken", b =>
                {
                    b.HasOne("Schools.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.RolePermission", b =>
                {
                    b.HasOne("Schools.Domain.Models.Access_Control.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Models.Access_Control.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Models.User", b =>
                {
                    b.HasOne("Schools.Domain.Models.Access_Control.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Schools.Domain.Models.Access_Control.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<byte[]>("PasswordHash")
                                .HasColumnName("PasswordHash")
                                .HasColumnType("varbinary(max)");

                            b1.Property<byte[]>("PasswordSalt")
                                .HasColumnName("PasswordSalt")
                                .HasColumnType("varbinary(max)");

                            b1.HasKey("UserId");

                            b1.ToTable("USERS");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
