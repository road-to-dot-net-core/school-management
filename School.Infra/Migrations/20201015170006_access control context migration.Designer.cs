// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Infra;

namespace School.Infra.Migrations
{
    [DbContext(typeof(AccessControlContext))]
    [Migration("20201015170006_access control context migration")]
    partial class accesscontrolcontextmigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.Feature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnName("Action")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnName("Controller")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ControllerActionName")
                        .HasColumnName("ControllerActionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 15, 17, 0, 6, 212, DateTimeKind.Local).AddTicks(3295));

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Label")
                        .HasColumnName("Label")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("FEATURES");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 15, 17, 0, 6, 248, DateTimeKind.Local).AddTicks(2872));

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnName("Label")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("PERMISSIONS");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.PermissionFeature", b =>
                {
                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssociatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("FeatureId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("PERMISSIONS_FEATURES");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 15, 17, 0, 6, 251, DateTimeKind.Local).AddTicks(3577));

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("ROLES");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssociatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 15, 17, 0, 6, 254, DateTimeKind.Local).AddTicks(1015));

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("ROLE_PERMISSIONS");
                });

            modelBuilder.Entity("Schools.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 15, 17, 0, 6, 263, DateTimeKind.Local).AddTicks(9887));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("USERS");
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.PermissionFeature", b =>
                {
                    b.HasOne("Schools.Domain.Models.Access_Control.Feature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Models.Access_Control.Permission", "Permission")
                        .WithMany("PermissionFeatures")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Models.Access_Control.RolePermission", b =>
                {
                    b.HasOne("Schools.Domain.Models.Access_Control.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Models.Access_Control.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Models.User", b =>
                {
                    b.HasOne("Schools.Domain.Models.Access_Control.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
