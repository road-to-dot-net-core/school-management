// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using School.Infra;

namespace School.Infra.Migrations.School
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20201016161744_add branch class")]
    partial class addbranchclass
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Schools.Domain.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Attended")
                        .HasColumnType("bit");

                    b.Property<Guid>("CourseOfferingSessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 83, DateTimeKind.Local).AddTicks(3000));

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("CourseOfferingSessionId");

                    b.HasIndex("StudentId");

                    b.ToTable("ATTENDANCES");
                });

            modelBuilder.Entity("Schools.Domain.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 89, DateTimeKind.Local).AddTicks(783));

                    b.Property<string>("Desription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("CATEGORIES");
                });

            modelBuilder.Entity("Schools.Domain.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 121, DateTimeKind.Local).AddTicks(7561));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<long>("DurationTicks")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ParentId");

                    b.ToTable("COURSES");
                });

            modelBuilder.Entity("Schools.Domain.CourseOffering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 174, DateTimeKind.Local).AddTicks(2919));

                    b.Property<Guid>("DefaultRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LevelClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("DefaultRoomId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LevelClassId");

                    b.ToTable("COURSES_OFFERING");
                });

            modelBuilder.Entity("Schools.Domain.CourseOfferingSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Canceled")
                        .HasColumnType("bit");

                    b.Property<Guid>("CourseOfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 133, DateTimeKind.Local).AddTicks(1241));

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("CourseOfferingId");

                    b.HasIndex("RoomId");

                    b.ToTable("COURSES_OFFERING_SESSIONS");
                });

            modelBuilder.Entity("Schools.Domain.Instructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 136, DateTimeKind.Local).AddTicks(4191));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("INSTRUCTORS");
                });

            modelBuilder.Entity("Schools.Domain.LevelClass", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 140, DateTimeKind.Local).AddTicks(652));

                    b.Property<Guid>("LevelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("LevelId");

                    b.ToTable("LEVEL_CLASSES");
                });

            modelBuilder.Entity("Schools.Domain.Models.AdminStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 46, DateTimeKind.Local).AddTicks(4917));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("OrgId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("OrgId");

                    b.ToTable("ADMINISTRATION_STAFFS");
                });

            modelBuilder.Entity("Schools.Domain.Models.CourseInstructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssociatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssociatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 94, DateTimeKind.Local).AddTicks(3901));

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 93, DateTimeKind.Local).AddTicks(7029));

                    b.Property<Guid>("InstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.ToTable("COURSES_INSTRUCTORS");
                });

            modelBuilder.Entity("Schools.Domain.Models.CourseOfferingDay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseOfferingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 129, DateTimeKind.Local).AddTicks(7573));

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<long>("EndTimeTicks")
                        .HasColumnType("bigint");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<long>("StartTimeTicks")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("CourseOfferingId");

                    b.ToTable("COURSE_OFFERING_DAYS");
                });

            modelBuilder.Entity("Schools.Domain.Models.Level", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 143, DateTimeKind.Local).AddTicks(9174));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("LEVELS");
                });

            modelBuilder.Entity("Schools.Domain.Models.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 146, DateTimeKind.Local).AddTicks(3622));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("ORGANIZATIONS");
                });

            modelBuilder.Entity("Schools.Domain.Models.School_Management.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("Schools.Domain.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 152, DateTimeKind.Local).AddTicks(83));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.ToTable("ROOMS");
                });

            modelBuilder.Entity("Schools.Domain.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<Guid?>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2020, 10, 16, 16, 17, 43, 166, DateTimeKind.Local).AddTicks(2193));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("LevelClassId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid?>("UpdatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedBy")
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValue(null);

                    b.Property<DateTime?>("UpdatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2")
                        .HasDefaultValue(null);

                    b.HasKey("Id");

                    b.HasIndex("LevelClassId");

                    b.ToTable("STUDENTS");
                });

            modelBuilder.Entity("Schools.Domain.Attendance", b =>
                {
                    b.HasOne("Schools.Domain.CourseOfferingSession", "CourseOfferingSession")
                        .WithMany()
                        .HasForeignKey("CourseOfferingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Course", b =>
                {
                    b.HasOne("Schools.Domain.Models.School_Management.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Course", "Parent")
                        .WithMany("SubCourses")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Schools.Domain.CourseOffering", b =>
                {
                    b.HasOne("Schools.Domain.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Room", "DefaultRoom")
                        .WithMany()
                        .HasForeignKey("DefaultRoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Instructor", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.LevelClass", "LevelClass")
                        .WithMany()
                        .HasForeignKey("LevelClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.CourseOfferingSession", b =>
                {
                    b.HasOne("Schools.Domain.CourseOffering", "CourseOffering")
                        .WithMany("CourseOfferingSessions")
                        .HasForeignKey("CourseOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.LevelClass", b =>
                {
                    b.HasOne("Schools.Domain.Models.School_Management.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Models.Level", "Level")
                        .WithMany("LevelClasses")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Models.AdminStaff", b =>
                {
                    b.HasOne("Schools.Domain.Models.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Models.CourseInstructor", b =>
                {
                    b.HasOne("Schools.Domain.Course", "Course")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Schools.Domain.Instructor", "Instructor")
                        .WithMany("CourseInstructors")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Models.CourseOfferingDay", b =>
                {
                    b.HasOne("Schools.Domain.CourseOffering", "CourseOffering")
                        .WithMany("OfferingDays")
                        .HasForeignKey("CourseOfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Schools.Domain.Student", b =>
                {
                    b.HasOne("Schools.Domain.LevelClass", "LevelClass")
                        .WithMany("Students")
                        .HasForeignKey("LevelClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
